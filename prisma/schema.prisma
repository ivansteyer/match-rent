// ---------- Generator ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Datasource (SQLite local) ----------
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // ej: "file:./dev.db"
}

// ---------- Enums ----------
enum Role {
  TENANT
  LANDLORD
  ADMIN
}

enum MatchStatus {
  LIKED
  DISLIKED
  CONNECTED
}

enum DocumentType {
  IDDOC
  PAYSLIP
  CONTRACT
  CV
  SELFIE
  OTHER
}

// ---------- NextAuth-compatible models ----------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(TENANT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones de negocio (1-1 opcional)
  tenant   Tenant?
  landlord Landlord?

  // Relaciones NextAuth
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Modelos de negocio ----------
model Tenant {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  monthlyIncome   Int?
  hasPets         Boolean?  @default(false)
  birthDate       DateTime?
  nationality     String?
  gender          String?
  peopleCount     Int?
  residenceStatus String?
  employment      String?
  linkedin        String?


  documents Document[]
  matches   Match[]
}

model Landlord {
  id        String   @id @default(cuid())
  userId    String   @unique
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties Property[]
}

model Property {
  id         String   @id @default(cuid())
  landlordId String
  title      String
  city   String
  price      Int
  bedrooms   Int      @default(1)
  photos     Json? // guarda URLs
  createdAt  DateTime @default(now())
  terrace    Boolean?
  elevator   Boolean?
  available  DateTime

  landlord Landlord @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  matches  Match[]
}

model Match {
  id         String      @id @default(cuid())
  tenantId   String
  propertyId String
  status     MatchStatus @default(LIKED)
  createdAt  DateTime    @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([tenantId, propertyId]) // un match por combinaci√≥n
}

model Document {
  id         String       @id @default(cuid())
  tenantId   String
  type       DocumentType
  url        String
  uploadedAt DateTime     @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}